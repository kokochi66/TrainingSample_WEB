package Y2020.M11.D25;

import java.util.*;

import java.io.*;
public class Main {
	static BufferedReader rd = new BufferedReader(new InputStreamReader(System.in));
	static BufferedWriter wr = new BufferedWriter(new OutputStreamWriter(System.out));
	static StringTokenizer tok;
	public static void main(String[] args) throws Exception {
		solution();
	}
	
	public static void solution() throws Exception {
		int Testcase = Integer.parseInt(rd.readLine());
		for(int TT=0;TT<Testcase;TT++) {
			rd.readLine();
			int n = Integer.parseInt(rd.readLine());
			double[][] arr = new double[n][2];
			for(int i=0;i<n;i++) {
				tok = new StringTokenizer(rd.readLine());
				arr[i][0] = Double.parseDouble(tok.nextToken());
				arr[i][1] = Double.parseDouble(tok.nextToken());
			}
			// ют╥б O
			double[][] darr = new double[n][n];
			ArrayList<Edge> egr = new ArrayList<Edge>();
			for(int i=0;i<n-1;i++) {
				for(int j=i+1;j<n;j++) {
					double temp = Math.sqrt(Math.pow(Math.abs(arr[i][0]-arr[j][0]),2) + 
							Math.pow(Math.abs(arr[i][1]-arr[j][1]),2));
					egr.add(new Edge(i,j,temp));
				}
			}
			Collections.sort(egr);
			for(int i=0;i<egr.size();i++) {
				System.out.println(egr.get(i).a+" "+egr.get(i).b+" "+egr.get(i).dist);
			}
//			for(int i=0;i<n;i++) System.out.println(Arrays.toString(darr[i]));
		}
	}
	static class Edge implements Comparable<Edge>{
		double dist;
		int a, b;
		public Edge(int ai, int bi, double d) {
			this.a = ai;
			this.b = bi;
			this.dist = d;
		}
		@Override
		public int compareTo(Edge o) {
			return this.dist > o.dist ? 1 : -1;
		}
	}
	public static int getp(int[] p, int x){
        if(p[x] == x) return x;
        return p[x] = getp(p,p[x]);
    }
    public static void unip(int[] p, int a, int b){
        a = getp(p, a);
        b = getp(p, b);
        if(a<b) p[b] = a;
        else p[a] = b;
    }
    public static boolean finp(int[] p, int a, int b){
        a = getp(p, a);
        b = getp(p, b);
        return a==b;
    }

}
